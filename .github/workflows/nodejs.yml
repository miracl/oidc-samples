name: nodejs

on:
  push:
    paths:
      - "samples/nodejs/*"
      - ".github/workflows/nodejs.yml"

env:
  USER: ${{ secrets.USER }}
  AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
  DOCKER_REGISTRY: docker.pkg.github.com
  SAMPLE_IMAGE: docker.pkg.github.com/miracl/oidc-samples/nodejs
  PROXY_IMAGE_LATEST: docker.pkg.github.com/miracl/oidc-samples/proxy:latest
  INT_TESTS_IMAGE_LATEST: docker.pkg.github.com/miracl/oidc-samples/integration-tests:latest

jobs:
  lint-nodejs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Run eslint
        run: |
          npm install --prefix samples/nodejs
          npm run eslint:action --prefix samples/nodejs

  build-docker:
    needs: lint-nodejs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Docker login, build & push
        run: |
          docker login -u $USER -p $AUTH_TOKEN $DOCKER_REGISTRY
          docker build --tag $SAMPLE_IMAGE:latest samples/nodejs/
          docker push $SAMPLE_IMAGE:latest
          docker tag $SAMPLE_IMAGE:latest $SAMPLE_IMAGE:$GITHUB_SHA
          docker push $SAMPLE_IMAGE:$GITHUB_SHA

  run-integration-tests:
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Run integration tests
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

        run: >
          docker login -u $USER -p $AUTH_TOKEN $DOCKER_REGISTRY

          docker pull $SAMPLE_IMAGE:latest

          docker run 
          --detach 
          --publish 8000:8000 
          --env CLIENT_ID 
          --env CLIENT_SECRET 
          $SAMPLE_IMAGE:latest

          docker run 
          --network="host" 
          --env CLIENT_ID 
          --env CLIENT_SECRET 
          $INT_TESTS_IMAGE_LATEST

  run-integration-tests-with-proxy:
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Run integration tests through proxy
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

        run: >
            docker login -u $USER -p $AUTH_TOKEN $DOCKER_REGISTRY

            docker run 
            --detach 
            --publish 8080:8080 
            $PROXY_IMAGE_LATEST

            docker run 
            --detach 
            --env CLIENT_ID 
            --env CLIENT_SECRET 
            --env PROXY_HOST=127.0.0.1 
            --env PROXY_PORT=8080 
            --network="host"
            $SAMPLE_IMAGE:latest

            docker run 
            --network="host" 
            --env CLIENT_ID 
            --env CLIENT_SECRET 
            $INT_TESTS_IMAGE_LATEST
