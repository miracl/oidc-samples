// Generated by gen/wrappers/main.go from wrap/rsa_wrappers.go.tmpl.

package bindings

{{if ne .Suffix ""}}
// #cgo LDFLAGS: -lamcl_rsa_{{.Suffix}}
// #include "amcl/rsa_{{.Suffix}}.h"{{end}}
// #include "amcl/rsa_support.h"
import "C"

{{if ne .Suffix ""}}
// RSA constants
const (
    RFS{{.Suffix}} = int(C.RFS_{{.Suffix}}) // RFS{{.Suffix}} is the RSA Public Key Size in bytes
    FFLEN{{.Suffix}} = int(C.FFLEN_{{.Suffix}}) // FFLEN{{.Suffix}} consists in 2^n multiplier of BIGBITS to specify supported Finite Field size, e.g 2048=256*2^3 where BIGBITS=256
    HashTypeRSA{{.Suffix}} int = int(C.HASH_TYPE_RSA_{{.Suffix}}) // HashTypeRSA{{.Suffix}} is the chosen Hash algorithm
)

// NewRSAPrivateKey{{.Suffix}} creates new RSA {{.Suffix}} Private key
func NewRSAPrivateKey{{.Suffix}}() RSAPrivateKey {
	return &C.rsa_private_key_{{.Suffix}}{}
}

// NewRSAPublicKey{{.Suffix}} creates new RSA {{.Suffix}} public key
func NewRSAPublicKey{{.Suffix}}() RSAPublicKey {
	return &C.rsa_public_key_{{.Suffix}}{}
}
{{end}}

{{template "goNativeWrappers" .}}
