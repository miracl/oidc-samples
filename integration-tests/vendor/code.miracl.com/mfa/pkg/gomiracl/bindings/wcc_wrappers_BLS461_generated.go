// Generated by gen/wrappers/main.go from wrap/wcc_wrappers.go.tmpl.

//go:build !ignoredefaultcurves || BLS461

package bindings

// #cgo LDFLAGS: -lamcl_wcc_BLS461
// #include "amcl/wcc_BLS461.h"
import "C"

// Curve constants
const (
	WCCPGSBLS461 = int(C.WCC_PGS_BLS461)
	WCCPFSBLS461 = int(C.WCC_PFS_BLS461)
)

// WCCRandomGenerateBLS461 is a go wrapper for C.WCC_BLS461_RANDOM_GENERATE.
func WCCRandomGenerateBLS461(RNG *Rand, S *Octet) error {
	code := C.WCC_BLS461_RANDOM_GENERATE((*C.csprng)(RNG), (*C.octet)(S))

	return newError(code)
}

// WCCHqBLS461 is a go wrapper for C.WCC_BLS461_Hq.
func WCCHqBLS461(h int, A *Octet, B *Octet, C *Octet, D *Octet, res *Octet) {
	C.WCC_BLS461_Hq(C.int(h), (*C.octet)(A), (*C.octet)(B), (*C.octet)(C), (*C.octet)(D), (*C.octet)(res))
}

// WCCGetG1MultipleBLS461 is a go wrapper for C.WCC_BLS461_GET_G1_MULTIPLE.
func WCCGetG1MultipleBLS461(S *Octet, HID *Octet, VG1 *Octet) error {
	code := C.WCC_BLS461_GET_G1_MULTIPLE((*C.octet)(S), (*C.octet)(HID), (*C.octet)(VG1))

	return newError(code)
}

// WCCRecombineG1BLS461 is a go wrapper for C.WCC_BLS461_RECOMBINE_G1.
func WCCRecombineG1BLS461(R1 *Octet, R2 *Octet, R *Octet) error {
	code := C.WCC_BLS461_RECOMBINE_G1((*C.octet)(R1), (*C.octet)(R2), (*C.octet)(R))

	return newError(code)
}

// WCCGetG2MultipleBLS461 is a go wrapper for C.WCC_BLS461_GET_G2_MULTIPLE.
func WCCGetG2MultipleBLS461(S *Octet, HID *Octet, VG2 *Octet) error {
	code := C.WCC_BLS461_GET_G2_MULTIPLE((*C.octet)(S), (*C.octet)(HID), (*C.octet)(VG2))

	return newError(code)
}

// WCCRecombineG2BLS461 is a go wrapper for C.WCC_BLS461_RECOMBINE_G2.
func WCCRecombineG2BLS461(W1 *Octet, W2 *Octet, W *Octet) error {
	code := C.WCC_BLS461_RECOMBINE_G2((*C.octet)(W1), (*C.octet)(W2), (*C.octet)(W))

	return newError(code)
}

// WCCReceiverKeyBLS461 is a go wrapper for C.WCC_BLS461_RECEIVER_KEY.
func WCCReceiverKeyBLS461(h int, y *Octet, w *Octet, pia *Octet, pib *Octet, PaG1 *Octet, PgG1 *Octet, BKeyG2 *Octet, IDA *Octet, AESKey *Octet) error {
	code := C.WCC_BLS461_RECEIVER_KEY(C.int(h), (*C.octet)(y), (*C.octet)(w), (*C.octet)(pia), (*C.octet)(pib), (*C.octet)(PaG1), (*C.octet)(PgG1), (*C.octet)(BKeyG2), (*C.octet)(IDA), (*C.octet)(AESKey))

	return newError(code)
}

// WCCSenderKeyBLS461 is a go wrapper for C.WCC_BLS461_SENDER_KEY.
func WCCSenderKeyBLS461(h int, x *Octet, pia *Octet, pib *Octet, PbG2 *Octet, PgG1 *Octet, AKeyG1 *Octet, IDB *Octet, AESKey *Octet) error {
	code := C.WCC_BLS461_SENDER_KEY(C.int(h), (*C.octet)(x), (*C.octet)(pia), (*C.octet)(pib), (*C.octet)(PbG2), (*C.octet)(PgG1), (*C.octet)(AKeyG1), (*C.octet)(IDB), (*C.octet)(AESKey))

	return newError(code)
}
