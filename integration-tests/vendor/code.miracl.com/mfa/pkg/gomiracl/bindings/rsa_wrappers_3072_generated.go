// Generated by gen/wrappers/main.go from wrap/rsa_wrappers.go.tmpl.

package bindings

// #cgo LDFLAGS: -lamcl_rsa_3072
// #include "amcl/rsa_3072.h"
// #include "amcl/rsa_support.h"
import "C"

// RSA constants
const (
	RFS3072             = int(C.RFS_3072)           // RFS3072 is the RSA Public Key Size in bytes
	FFLEN3072           = int(C.FFLEN_3072)         // FFLEN3072 consists in 2^n multiplier of BIGBITS to specify supported Finite Field size, e.g 2048=256*2^3 where BIGBITS=256
	HashTypeRSA3072 int = int(C.HASH_TYPE_RSA_3072) // HashTypeRSA3072 is the chosen Hash algorithm
)

// NewRSAPrivateKey3072 creates new RSA 3072 Private key
func NewRSAPrivateKey3072() RSAPrivateKey {
	return &C.rsa_private_key_3072{}
}

// NewRSAPublicKey3072 creates new RSA 3072 public key
func NewRSAPublicKey3072() RSAPublicKey {
	return &C.rsa_public_key_3072{}
}

// RSADecrypt3072 is a go wrapper for C.RSA_3072_DECRYPT.
func RSADecrypt3072(priv RSAPrivateKey, G *Octet, F *Octet) {
	C.RSA_3072_DECRYPT(priv.(*C.rsa_private_key_3072), (*C.octet)(G), (*C.octet)(F))
}

// RSAEncrypt3072 is a go wrapper for C.RSA_3072_ENCRYPT.
func RSAEncrypt3072(pub RSAPublicKey, F *Octet, G *Octet) {
	C.RSA_3072_ENCRYPT(pub.(*C.rsa_public_key_3072), (*C.octet)(F), (*C.octet)(G))
}

// RSAKeyPair3072 is a go wrapper for C.RSA_3072_KEY_PAIR.
func RSAKeyPair3072(rng *Rand, e int32, priv RSAPrivateKey, pub RSAPublicKey, p *Octet, q *Octet) {
	C.RSA_3072_KEY_PAIR((*C.csprng)(rng), C.sign32(e), priv.(*C.rsa_private_key_3072), pub.(*C.rsa_public_key_3072), (*C.octet)(p), (*C.octet)(q))
}

// RSAPrivateKeyKill3072 is a go wrapper for C.RSA_3072_PRIVATE_KEY_KILL.
func RSAPrivateKeyKill3072(PRIV RSAPrivateKey) {
	C.RSA_3072_PRIVATE_KEY_KILL(PRIV.(*C.rsa_private_key_3072))
}
