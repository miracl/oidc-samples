// Generated by gen/wrappers/main.go from rsa_wrappers.go.tmpl.

package wrap

import "code.miracl.com/mfa/pkg/gomiracl/bindings"

// RSADecrypt2048 is a wrapper of bindings.RSA_2048_DECRYPT.
func RSADecrypt2048(priv bindings.RSAPrivateKey, G []byte) (F []byte) {

	GOct := bindings.NewOctet(G)
	defer GOct.Free()

	FSize := bindings.RFS2048
	FOct := bindings.MakeOctet(FSize)
	defer FOct.Free()

	bindings.RSADecrypt2048(priv, GOct, FOct)

	F = FOct.ToBytes()

	return
}

// RSAEncrypt2048 is a wrapper of bindings.RSA_2048_ENCRYPT.
func RSAEncrypt2048(pub bindings.RSAPublicKey, F []byte) (G []byte) {

	FOct := bindings.NewOctet(F)
	defer FOct.Free()

	GSize := bindings.RFS2048
	GOct := bindings.MakeOctet(GSize)
	defer GOct.Free()

	bindings.RSAEncrypt2048(pub, FOct, GOct)

	G = GOct.ToBytes()

	return
}

// RSAKeyPair2048 is a wrapper of bindings.RSA_2048_KEY_PAIR.
func RSAKeyPair2048(rng *bindings.Rand, e int32, p []byte, q []byte) (priv bindings.RSAPrivateKey, pub bindings.RSAPublicKey) {

	priv = bindings.NewRSAPrivateKey2048()

	pub = bindings.NewRSAPublicKey2048()

	pOct := bindings.NewOctet(p)
	defer pOct.Free()

	qOct := bindings.NewOctet(q)
	defer qOct.Free()

	bindings.RSAKeyPair2048(rng, e, priv, pub, pOct, qOct)

	return
}

// RSAPrivateKeyKill2048 is a wrapper of bindings.RSA_2048_PRIVATE_KEY_KILL.
func RSAPrivateKeyKill2048(PRIV bindings.RSAPrivateKey) {

	bindings.RSAPrivateKeyKill2048(PRIV)

	return
}
