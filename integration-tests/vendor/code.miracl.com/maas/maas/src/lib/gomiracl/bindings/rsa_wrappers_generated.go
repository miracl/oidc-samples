// Generated by gen/wrappers/main.go from wrap/rsa_wrappers.go.tmpl.

package bindings

// #include "amcl/rsa_support.h"
import "C"

// PKCS15 is a go wrapper for C.PKCS15.
func PKCS15(h int, m *Octet, w *Octet) error {
	var mCOct *C.octet = nil
	if m != nil {
		mCOct = (*C.octet)(&m.cOctet)
	}

	var wCOct *C.octet = nil
	if w != nil {
		wCOct = (*C.octet)(&w.cOctet)
	}

	code := C.PKCS15(C.int(h), mCOct, wCOct)

	return newError(code)
}

// OAEPencode is a go wrapper for C.OAEP_ENCODE.
func OAEPencode(h int, m *Octet, rng *Rand, p *Octet, f *Octet) error {
	var mCOct *C.octet = nil
	if m != nil {
		mCOct = (*C.octet)(&m.cOctet)
	}

	var pCOct *C.octet = nil
	if p != nil {
		pCOct = (*C.octet)(&p.cOctet)
	}

	var fCOct *C.octet = nil
	if f != nil {
		fCOct = (*C.octet)(&f.cOctet)
	}

	code := C.OAEP_ENCODE(C.int(h), mCOct, (*C.csprng)(rng), pCOct, fCOct)

	return newError(code)
}

// OAEPdecode is a go wrapper for C.OAEP_DECODE.
func OAEPdecode(h int, p *Octet, f *Octet) error {
	var pCOct *C.octet = nil
	if p != nil {
		pCOct = (*C.octet)(&p.cOctet)
	}

	var fCOct *C.octet = nil
	if f != nil {
		fCOct = (*C.octet)(&f.cOctet)
	}

	code := C.OAEP_DECODE(C.int(h), pCOct, fCOct)

	return newError(code)
}
