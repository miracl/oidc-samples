// Generated by gen/wrappers/main.go from pbc_wrappers.go.tmpl.

package wrap

import "code.miracl.com/maas/maas/src/lib/gomiracl/bindings"

// PBKDF2 is a wrapper of bindings.PBKDF2.
func PBKDF2(h int, P []byte, S []byte, rep int, len int) (K []byte) {

	POct := bindings.NewOctet(P)
	defer POct.Free()

	SOct := bindings.NewOctet(S)
	defer SOct.Free()

	KSize := len
	KOct := bindings.MakeOctet(KSize)
	defer KOct.Free()

	bindings.PBKDF2(h, POct, SOct, rep, len, KOct)

	K = KOct.ToBytes()

	return
}

// HashID is a wrapper of bindings.HASH_ID.
func HashID(h int, ID []byte, HIDSize int) (HID []byte) {

	IDOct := bindings.NewOctet(ID)
	defer IDOct.Free()

	HIDOct := bindings.MakeOctet(HIDSize)
	defer HIDOct.Free()

	bindings.HashID(h, IDOct, HIDOct)

	HID = HIDOct.ToBytes()

	return
}

// HashAll is a wrapper of bindings.HASH_ALL.
func HashAll(h int, I []byte, U []byte, CU []byte, Y []byte, V []byte, R []byte, W []byte, HSize int) (H []byte) {

	IOct := bindings.NewOctet(I)
	defer IOct.Free()

	UOct := bindings.NewOctet(U)
	defer UOct.Free()

	CUOct := bindings.NewOctet(CU)
	defer CUOct.Free()

	YOct := bindings.NewOctet(Y)
	defer YOct.Free()

	VOct := bindings.NewOctet(V)
	defer VOct.Free()

	ROct := bindings.NewOctet(R)
	defer ROct.Free()

	WOct := bindings.NewOctet(W)
	defer WOct.Free()

	HOct := bindings.MakeOctet(HSize)
	defer HOct.Free()

	bindings.HashAll(h, IOct, UOct, CUOct, YOct, VOct, ROct, WOct, HOct)

	H = HOct.ToBytes()

	return
}

// GenerateRandomByte is a wrapper of bindings.generateRandom.
func GenerateRandomByte(RNG *bindings.Rand, randomValueSize int) (randomValue []byte) {

	randomValueOct := bindings.MakeOctet(randomValueSize)
	defer randomValueOct.Free()

	bindings.GenerateRandom(RNG, randomValueOct)

	randomValue = randomValueOct.ToBytes()

	return
}

// AESGCMEncrypt is a wrapper of bindings.AES_GCM_ENCRYPT.
func AESGCMEncrypt(K []byte, IV []byte, H []byte, P []byte) (Ci []byte, T []byte) {

	KOct := bindings.NewOctet(K)
	defer KOct.Free()

	IVOct := bindings.NewOctet(IV)
	defer IVOct.Free()

	HOct := bindings.NewOctet(H)
	defer HOct.Free()

	POct := bindings.NewOctet(P)
	defer POct.Free()

	CiSize := len(P)
	CiOct := bindings.MakeOctet(CiSize)
	defer CiOct.Free()

	TSize := 16
	TOct := bindings.MakeOctet(TSize)
	defer TOct.Free()

	bindings.AESGCMEncrypt(KOct, IVOct, HOct, POct, CiOct, TOct)

	Ci = CiOct.ToBytes()

	T = TOct.ToBytes()

	return
}

// AESGCMDecrypt is a wrapper of bindings.AES_GCM_DECRYPT.
func AESGCMDecrypt(K []byte, IV []byte, H []byte, Ci []byte) (P []byte, T []byte) {

	KOct := bindings.NewOctet(K)
	defer KOct.Free()

	IVOct := bindings.NewOctet(IV)
	defer IVOct.Free()

	HOct := bindings.NewOctet(H)
	defer HOct.Free()

	CiOct := bindings.NewOctet(Ci)
	defer CiOct.Free()

	PSize := len(Ci)
	POct := bindings.MakeOctet(PSize)
	defer POct.Free()

	TSize := 16
	TOct := bindings.MakeOctet(TSize)
	defer TOct.Free()

	bindings.AESGCMDecrypt(KOct, IVOct, HOct, CiOct, POct, TOct)

	P = POct.ToBytes()

	T = TOct.ToBytes()

	return
}

// GenerateOTP is a wrapper of bindings.generateOTP.
func GenerateOTP(RNG *bindings.Rand) (rtn int) {

	rtn = bindings.GenerateOTP(RNG)

	return
}
