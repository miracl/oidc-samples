// Generated by gen/wrappers/main.go from wrap/rsa_wrappers.go.tmpl.

package bindings

// #cgo LDFLAGS: -lamcl_rsa_2048
// #include "amcl/rsa_2048.h"
// #include "amcl/rsa_support.h"
import "C"

// RSA constants
const (
	RFS2048             = int(C.RFS_2048)           // RFS2048 is the RSA Public Key Size in bytes
	FFLEN2048           = int(C.FFLEN_2048)         // FFLEN2048 consists in 2^n multiplier of BIGBITS to specify supported Finite Field size, e.g 2048=256*2^3 where BIGBITS=256
	HashTypeRSA2048 int = int(C.HASH_TYPE_RSA_2048) // HashTypeRSA2048 is the chosen Hash algorithm
)

// NewRSAPrivateKey2048 creates new RSA 2048 Private key
func NewRSAPrivateKey2048() RSAPrivateKey {
	return &C.rsa_private_key_2048{}
}

// NewRSAPublicKey2048 creates new RSA 2048 public key
func NewRSAPublicKey2048() RSAPublicKey {
	return &C.rsa_public_key_2048{}
}

// RSADecrypt2048 is a go wrapper for C.RSA_2048_DECRYPT.
func RSADecrypt2048(priv RSAPrivateKey, G *Octet, F *Octet) {
	var GCOct *C.octet = nil
	if G != nil {
		GCOct = (*C.octet)(&G.cOctet)
	}

	var FCOct *C.octet = nil
	if F != nil {
		FCOct = (*C.octet)(&F.cOctet)
	}

	C.RSA_2048_DECRYPT(priv.(*C.rsa_private_key_2048), GCOct, FCOct)
}

// RSAEncrypt2048 is a go wrapper for C.RSA_2048_ENCRYPT.
func RSAEncrypt2048(pub RSAPublicKey, F *Octet, G *Octet) {
	var FCOct *C.octet = nil
	if F != nil {
		FCOct = (*C.octet)(&F.cOctet)
	}

	var GCOct *C.octet = nil
	if G != nil {
		GCOct = (*C.octet)(&G.cOctet)
	}

	C.RSA_2048_ENCRYPT(pub.(*C.rsa_public_key_2048), FCOct, GCOct)
}

// RSAKeyPair2048 is a go wrapper for C.RSA_2048_KEY_PAIR.
func RSAKeyPair2048(rng *Rand, e int32, priv RSAPrivateKey, pub RSAPublicKey, p *Octet, q *Octet) {

	var pCOct *C.octet = nil
	if p != nil {
		pCOct = (*C.octet)(&p.cOctet)
	}

	var qCOct *C.octet = nil
	if q != nil {
		qCOct = (*C.octet)(&q.cOctet)
	}

	C.RSA_2048_KEY_PAIR((*C.csprng)(rng), C.sign32(e), priv.(*C.rsa_private_key_2048), pub.(*C.rsa_public_key_2048), pCOct, qCOct)
}

// RSAPrivateKeyKill2048 is a go wrapper for C.RSA_2048_PRIVATE_KEY_KILL.
func RSAPrivateKeyKill2048(PRIV RSAPrivateKey) {

	C.RSA_2048_PRIVATE_KEY_KILL(PRIV.(*C.rsa_private_key_2048))
}
