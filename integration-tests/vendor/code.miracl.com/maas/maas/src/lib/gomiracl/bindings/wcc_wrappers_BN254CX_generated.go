// Generated by gen/wrappers/main.go from wrap/wcc_wrappers.go.tmpl.

//go:build !ignoredefaultcurves || BN254CX

package bindings

// #cgo LDFLAGS: -lamcl_wcc_BN254CX
// #include "amcl/wcc_BN254CX.h"
import "C"

// Curve constants
const (
	WCCPGSBN254CX = int(C.WCC_PGS_BN254CX)
	WCCPFSBN254CX = int(C.WCC_PFS_BN254CX)
)

// WCCRandomGenerateBN254CX is a go wrapper for C.WCC_BN254CX_RANDOM_GENERATE.
func WCCRandomGenerateBN254CX(RNG *Rand, S *Octet) error {
	var SCOct *C.octet = nil
	if S != nil {
		SCOct = (*C.octet)(&S.cOctet)
	}

	code := C.WCC_BN254CX_RANDOM_GENERATE((*C.csprng)(RNG), SCOct)

	return newError(code)
}

// WCCHqBN254CX is a go wrapper for C.WCC_BN254CX_Hq.
func WCCHqBN254CX(h int, A *Octet, B *Octet, Ci *Octet, D *Octet, res *Octet) {
	var ACOct *C.octet = nil
	if A != nil {
		ACOct = (*C.octet)(&A.cOctet)
	}

	var BCOct *C.octet = nil
	if B != nil {
		BCOct = (*C.octet)(&B.cOctet)
	}

	var CiCOct *C.octet = nil
	if Ci != nil {
		CiCOct = (*C.octet)(&Ci.cOctet)
	}

	var DCOct *C.octet = nil
	if D != nil {
		DCOct = (*C.octet)(&D.cOctet)
	}

	var resCOct *C.octet = nil
	if res != nil {
		resCOct = (*C.octet)(&res.cOctet)
	}

	C.WCC_BN254CX_Hq(C.int(h), ACOct, BCOct, CiCOct, DCOct, resCOct)
}

// WCCGetG1MultipleBN254CX is a go wrapper for C.WCC_BN254CX_GET_G1_MULTIPLE.
func WCCGetG1MultipleBN254CX(S *Octet, HID *Octet, VG1 *Octet) error {
	var SCOct *C.octet = nil
	if S != nil {
		SCOct = (*C.octet)(&S.cOctet)
	}

	var HIDCOct *C.octet = nil
	if HID != nil {
		HIDCOct = (*C.octet)(&HID.cOctet)
	}

	var VG1COct *C.octet = nil
	if VG1 != nil {
		VG1COct = (*C.octet)(&VG1.cOctet)
	}

	code := C.WCC_BN254CX_GET_G1_MULTIPLE(SCOct, HIDCOct, VG1COct)

	return newError(code)
}

// WCCRecombineG1BN254CX is a go wrapper for C.WCC_BN254CX_RECOMBINE_G1.
func WCCRecombineG1BN254CX(R1 *Octet, R2 *Octet, R *Octet) error {
	var R1COct *C.octet = nil
	if R1 != nil {
		R1COct = (*C.octet)(&R1.cOctet)
	}

	var R2COct *C.octet = nil
	if R2 != nil {
		R2COct = (*C.octet)(&R2.cOctet)
	}

	var RCOct *C.octet = nil
	if R != nil {
		RCOct = (*C.octet)(&R.cOctet)
	}

	code := C.WCC_BN254CX_RECOMBINE_G1(R1COct, R2COct, RCOct)

	return newError(code)
}

// WCCGetG2MultipleBN254CX is a go wrapper for C.WCC_BN254CX_GET_G2_MULTIPLE.
func WCCGetG2MultipleBN254CX(S *Octet, HID *Octet, VG2 *Octet) error {
	var SCOct *C.octet = nil
	if S != nil {
		SCOct = (*C.octet)(&S.cOctet)
	}

	var HIDCOct *C.octet = nil
	if HID != nil {
		HIDCOct = (*C.octet)(&HID.cOctet)
	}

	var VG2COct *C.octet = nil
	if VG2 != nil {
		VG2COct = (*C.octet)(&VG2.cOctet)
	}

	code := C.WCC_BN254CX_GET_G2_MULTIPLE(SCOct, HIDCOct, VG2COct)

	return newError(code)
}

// WCCRecombineG2BN254CX is a go wrapper for C.WCC_BN254CX_RECOMBINE_G2.
func WCCRecombineG2BN254CX(W1 *Octet, W2 *Octet, W *Octet) error {
	var W1COct *C.octet = nil
	if W1 != nil {
		W1COct = (*C.octet)(&W1.cOctet)
	}

	var W2COct *C.octet = nil
	if W2 != nil {
		W2COct = (*C.octet)(&W2.cOctet)
	}

	var WCOct *C.octet = nil
	if W != nil {
		WCOct = (*C.octet)(&W.cOctet)
	}

	code := C.WCC_BN254CX_RECOMBINE_G2(W1COct, W2COct, WCOct)

	return newError(code)
}

// WCCReceiverKeyBN254CX is a go wrapper for C.WCC_BN254CX_RECEIVER_KEY.
func WCCReceiverKeyBN254CX(h int, y *Octet, w *Octet, pia *Octet, pib *Octet, PaG1 *Octet, PgG1 *Octet, BKeyG2 *Octet, IDA *Octet, AESKey *Octet) error {
	var yCOct *C.octet = nil
	if y != nil {
		yCOct = (*C.octet)(&y.cOctet)
	}

	var wCOct *C.octet = nil
	if w != nil {
		wCOct = (*C.octet)(&w.cOctet)
	}

	var piaCOct *C.octet = nil
	if pia != nil {
		piaCOct = (*C.octet)(&pia.cOctet)
	}

	var pibCOct *C.octet = nil
	if pib != nil {
		pibCOct = (*C.octet)(&pib.cOctet)
	}

	var PaG1COct *C.octet = nil
	if PaG1 != nil {
		PaG1COct = (*C.octet)(&PaG1.cOctet)
	}

	var PgG1COct *C.octet = nil
	if PgG1 != nil {
		PgG1COct = (*C.octet)(&PgG1.cOctet)
	}

	var BKeyG2COct *C.octet = nil
	if BKeyG2 != nil {
		BKeyG2COct = (*C.octet)(&BKeyG2.cOctet)
	}

	var IDACOct *C.octet = nil
	if IDA != nil {
		IDACOct = (*C.octet)(&IDA.cOctet)
	}

	var AESKeyCOct *C.octet = nil
	if AESKey != nil {
		AESKeyCOct = (*C.octet)(&AESKey.cOctet)
	}

	code := C.WCC_BN254CX_RECEIVER_KEY(C.int(h), yCOct, wCOct, piaCOct, pibCOct, PaG1COct, PgG1COct, BKeyG2COct, IDACOct, AESKeyCOct)

	return newError(code)
}

// WCCSenderKeyBN254CX is a go wrapper for C.WCC_BN254CX_SENDER_KEY.
func WCCSenderKeyBN254CX(h int, x *Octet, pia *Octet, pib *Octet, PbG2 *Octet, PgG1 *Octet, AKeyG1 *Octet, IDB *Octet, AESKey *Octet) error {
	var xCOct *C.octet = nil
	if x != nil {
		xCOct = (*C.octet)(&x.cOctet)
	}

	var piaCOct *C.octet = nil
	if pia != nil {
		piaCOct = (*C.octet)(&pia.cOctet)
	}

	var pibCOct *C.octet = nil
	if pib != nil {
		pibCOct = (*C.octet)(&pib.cOctet)
	}

	var PbG2COct *C.octet = nil
	if PbG2 != nil {
		PbG2COct = (*C.octet)(&PbG2.cOctet)
	}

	var PgG1COct *C.octet = nil
	if PgG1 != nil {
		PgG1COct = (*C.octet)(&PgG1.cOctet)
	}

	var AKeyG1COct *C.octet = nil
	if AKeyG1 != nil {
		AKeyG1COct = (*C.octet)(&AKeyG1.cOctet)
	}

	var IDBCOct *C.octet = nil
	if IDB != nil {
		IDBCOct = (*C.octet)(&IDB.cOctet)
	}

	var AESKeyCOct *C.octet = nil
	if AESKey != nil {
		AESKeyCOct = (*C.octet)(&AESKey.cOctet)
	}

	code := C.WCC_BN254CX_SENDER_KEY(C.int(h), xCOct, piaCOct, pibCOct, PbG2COct, PgG1COct, AKeyG1COct, IDBCOct, AESKeyCOct)

	return newError(code)
}
