// Generated by gen/wrappers/main.go from wrap/pbc_wrappers.go.tmpl.

package bindings

// #include "amcl/ecdh_support.h"
// #include "amcl/pbc_support.h"
// #include "amcl/utils.h"
import "C"

// PBKDF2 is a go wrapper for C.PBKDF2.
func PBKDF2(h int, P *Octet, S *Octet, rep int, len int, K *Octet) {
	var PCOct *C.octet = nil
	if P != nil {
		PCOct = (*C.octet)(&P.cOctet)
	}

	var SCOct *C.octet = nil
	if S != nil {
		SCOct = (*C.octet)(&S.cOctet)
	}

	var KCOct *C.octet = nil
	if K != nil {
		KCOct = (*C.octet)(&K.cOctet)
	}

	C.PBKDF2(C.int(h), PCOct, SCOct, C.int(rep), C.int(len), KCOct)
}

// HashID is a go wrapper for C.HASH_ID.
func HashID(h int, ID *Octet, HID *Octet) {
	var IDCOct *C.octet = nil
	if ID != nil {
		IDCOct = (*C.octet)(&ID.cOctet)
	}

	var HIDCOct *C.octet = nil
	if HID != nil {
		HIDCOct = (*C.octet)(&HID.cOctet)
	}

	C.HASH_ID(C.int(h), IDCOct, HIDCOct)
}

// HashAll is a go wrapper for C.HASH_ALL.
func HashAll(h int, I *Octet, U *Octet, CU *Octet, Y *Octet, V *Octet, R *Octet, W *Octet, H *Octet) {
	var ICOct *C.octet = nil
	if I != nil {
		ICOct = (*C.octet)(&I.cOctet)
	}

	var UCOct *C.octet = nil
	if U != nil {
		UCOct = (*C.octet)(&U.cOctet)
	}

	var CUCOct *C.octet = nil
	if CU != nil {
		CUCOct = (*C.octet)(&CU.cOctet)
	}

	var YCOct *C.octet = nil
	if Y != nil {
		YCOct = (*C.octet)(&Y.cOctet)
	}

	var VCOct *C.octet = nil
	if V != nil {
		VCOct = (*C.octet)(&V.cOctet)
	}

	var RCOct *C.octet = nil
	if R != nil {
		RCOct = (*C.octet)(&R.cOctet)
	}

	var WCOct *C.octet = nil
	if W != nil {
		WCOct = (*C.octet)(&W.cOctet)
	}

	var HCOct *C.octet = nil
	if H != nil {
		HCOct = (*C.octet)(&H.cOctet)
	}

	C.HASH_ALL(C.int(h), ICOct, UCOct, CUCOct, YCOct, VCOct, RCOct, WCOct, HCOct)
}

// GenerateRandom is a go wrapper for C.generateRandom.
func GenerateRandom(RNG *Rand, randomValue *Octet) {
	var randomValueCOct *C.octet = nil
	if randomValue != nil {
		randomValueCOct = (*C.octet)(&randomValue.cOctet)
	}

	C.generateRandom((*C.csprng)(RNG), randomValueCOct)
}

// AESGCMEncrypt is a go wrapper for C.AES_GCM_ENCRYPT.
func AESGCMEncrypt(K *Octet, IV *Octet, H *Octet, P *Octet, Ci *Octet, T *Octet) {
	var KCOct *C.octet = nil
	if K != nil {
		KCOct = (*C.octet)(&K.cOctet)
	}

	var IVCOct *C.octet = nil
	if IV != nil {
		IVCOct = (*C.octet)(&IV.cOctet)
	}

	var HCOct *C.octet = nil
	if H != nil {
		HCOct = (*C.octet)(&H.cOctet)
	}

	var PCOct *C.octet = nil
	if P != nil {
		PCOct = (*C.octet)(&P.cOctet)
	}

	var CiCOct *C.octet = nil
	if Ci != nil {
		CiCOct = (*C.octet)(&Ci.cOctet)
	}

	var TCOct *C.octet = nil
	if T != nil {
		TCOct = (*C.octet)(&T.cOctet)
	}

	C.AES_GCM_ENCRYPT(KCOct, IVCOct, HCOct, PCOct, CiCOct, TCOct)
}

// AESGCMDecrypt is a go wrapper for C.AES_GCM_DECRYPT.
func AESGCMDecrypt(K *Octet, IV *Octet, H *Octet, Ci *Octet, P *Octet, T *Octet) {
	var KCOct *C.octet = nil
	if K != nil {
		KCOct = (*C.octet)(&K.cOctet)
	}

	var IVCOct *C.octet = nil
	if IV != nil {
		IVCOct = (*C.octet)(&IV.cOctet)
	}

	var HCOct *C.octet = nil
	if H != nil {
		HCOct = (*C.octet)(&H.cOctet)
	}

	var CiCOct *C.octet = nil
	if Ci != nil {
		CiCOct = (*C.octet)(&Ci.cOctet)
	}

	var PCOct *C.octet = nil
	if P != nil {
		PCOct = (*C.octet)(&P.cOctet)
	}

	var TCOct *C.octet = nil
	if T != nil {
		TCOct = (*C.octet)(&T.cOctet)
	}

	C.AES_GCM_DECRYPT(KCOct, IVCOct, HCOct, CiCOct, PCOct, TCOct)
}

// GenerateOTP is a go wrapper for C.generateOTP.
func GenerateOTP(RNG *Rand) int {

	return int(C.generateOTP((*C.csprng)(RNG)))
}
